name: Build and Deploy Spring Boot App
on:
  push:
    branches:
      - more
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '22'
      
      - name: Build with Maven
        run: mvn clean package -DskipTests
      
      - name: Build Docker Image
        run: docker build -t ridemates-backend:latest .
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Push Docker Image to Docker Hub
        run: |
          docker tag ridemates-backend:latest ${{ secrets.DOCKER_USERNAME }}/ridemates-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ridemates-backend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            # Ensure we're logged into Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Explicitly pull the image
            docker pull ${{ secrets.DOCKER_USERNAME }}/ridemates-backend:latest

            # Remove existing container if it exists
            docker rm -f ridemates-backend || true

            # Run the new container with comprehensive logging
            docker run -d \
              --name ridemates-backend \
              --restart always \
              -p 8080:8080 \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_PORT="${{ secrets.DB_PORT }}" \
              -e DB_NAME="${{ secrets.DB_NAME }}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e MAIL_USERNAME="${{ secrets.MAIL_USERNAME }}" \
              -e MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}" \
              -e S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" \
              -e S3_SESSION_TOKEN="${{ secrets.S3_SESSION_TOKEN }}" \
              -e S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}" \
              -e S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY }}" \
              -e S3_REGION="${{ secrets.S3_REGION }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e STRIPE_PUBLISHABLE_KEY="${{ secrets.STRIPE_PUBLISHABLE_KEY }}" \
              -e STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
              -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
              -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
              -e GOOGLE_MAPS_API_KEY="${{ secrets.GOOGLE_MAPS_API_KEY }}" \
              ${{ secrets.DOCKER_USERNAME }}/ridemates-backend:latest

            # Verify container is running
            docker ps | grep ridemates-backend

            # Show container logs for debugging
            docker logs ridemates-backend
